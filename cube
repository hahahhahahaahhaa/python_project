import math
import time
import os
import numpy as np

A = B = C = 0
cube_widths = [20,10,5]
horizontal_offsets = [-40, 10, 40]
width, height = 160, 44
background_ascii_code = '.'
distance_from_cam = 100
K1 = 40
increment_speed = 0.9

def calculate_x(i,j,k,A,B,C):
    return (j * math.sin(A) * math.sin(B) * math.cos(C) -
            k * math.cos(A) * math.sin(B) * math.cos(C) +
            j * math.cos(A) * math.sin(C) +
            k * math.sin(A) * math.sin(C) +
            i * math.cos(B) * math.cos(C))
def calculate_y(i,j,k,A,B,C):
    return (j * math.cos(A) * math.cos(C) +
            k * math.sin(A) * math.cos(C) -
            j * math.sin(A) * math.sin(B) * math.sin(C) +
            k * math.cos(A) * math.sin(B) * math.sin(C) -
            i * math.cos(B) * math.sin(C))

def calculate_z(i, j, k, A, B, C):
    return (k * math.cos(A) * math.cos(B) -
            j * math.sin(A) * math.cos(B) +
            i * math.sin(B))

def calculate_for_surface(cubeX, cubeY, cubeZ, ch, A, B, C, buffer, z_buffer, horizontal_offset) :
    x = calculate_x(cubeX, cubeY, cubeZ, A, B, C)
    y = calculate_y(cubeX, cubeY, cubeZ, A, B, C)
    z = calculate_z(cubeX, cubeY, cubeZ, A, B, C) + distance_from_cam

    ooz = 1 / z
    xp = int(width / 2 + horizontal_offset + K1 * ooz * x * 2)
    yp = int(height / 2 + K1 * ooz * y)

    idx = xp + yp * width
    if 0 <= idx < width * height:
        if ooz > z_buffer[idx] :
            z_buffer[idx] = ooz
            buffer[idx] = ch

def main():
    global A, B, C
    while True:
        buffer = np.full((width * height), background_ascii_code, dtype = '<U1')
        z_buffer = np. zeros(width * height)

        for cube_width, horizontal_offset in zip(cube_widths, horizontal_offsets):
            for cubeX in np.arange(-cube_width, cube_width, increment_speed):
                for cubeY in np.arange(-cube_width, cube_width, increment_speed):
                    calculate_for_surface(cubeX, cubeY, -cube_width, '@', A, B, C, buffer, z_buffer, horizontal_offset)
                    calculate_for_surface(cube_width, cubeY, cubeX, '$', A, B, C, buffer, z_buffer, horizontal_offset)
                    calculate_for_surface(-cube_width, cubeY, -cubeX, '~', A, B, C, buffer, z_buffer, horizontal_offset)
                    calculate_for_surface(-cubeX, cubeY, cube_width, '#', A, B, C, buffer, z_buffer, horizontal_offset)
                    calculate_for_surface(cubeX, -cube_width, -cubeY, ';', A, B, C, buffer, z_buffer, horizontal_offset)
                    calculate_for_surface(cubeX, cube_width, cubeY, '+', A, B, C, buffer, z_buffer, horizontal_offset)
        os.system('cls' if os.name == 'nt' else 'clear')
        for k in range(height):
            print(''.join(buffer[k * width:(k + 1) * width]))

        A += 0.05
        B += 0.05
        C += 0.01
        time.sleep(0.016)

if __name__ == "__main__":
    main()
